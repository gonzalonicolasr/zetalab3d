/* ==============================
   Test Script for Access Control System
   Para verificar que el sistema funcione correctamente
============================== */

(function() {
  // Esperar a que el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üß™ Test de Access Control iniciado');
    
    // Test 1: Verificar que el sistema est√© cargado
    setTimeout(() => {
      if (window.accessControl) {
        console.log('‚úÖ Test 1 passed: AccessControl est√° disponible');
      } else {
        console.error('‚ùå Test 1 failed: AccessControl no est√° disponible');
      }
      
      // Test 2: Verificar funci√≥n de verificaci√≥n de caracter√≠sticas
      if (typeof window.checkFeatureAccess === 'function') {
        console.log('‚úÖ Test 2 passed: checkFeatureAccess est√° disponible');
      } else {
        console.error('‚ùå Test 2 failed: checkFeatureAccess no est√° disponible');
      }
      
      // Test 3: Verificar caracter√≠sticas espec√≠ficas
      const features = [
        'piece-saving',
        'export-html',
        'auto-url-complete',
        'advanced-presets',
        'piece-management',
        'version-history'
      ];
      
      console.log('üîç Verificando acceso a caracter√≠sticas:');
      features.forEach(feature => {
        const hasAccess = window.checkFeatureAccess(feature);
        console.log(`  ${feature}: ${hasAccess ? '‚úÖ Permitido' : '‚ùå Requiere Premium'}`);
      });
      
      // Test 4: Verificar elementos con indicadores premium
      const premiumElements = document.querySelectorAll('.premium-indicator');
      console.log(`üè∑Ô∏è Encontrados ${premiumElements.length} indicadores premium en la p√°gina`);
      
      // Test 5: Verificar botones protegidos
      const protectedButtons = [
        { id: 'btnSavePiece', feature: 'piece-saving' },
        { id: 'btnQuote', feature: 'export-html' },
        { id: 'btnAutoFromUrl', feature: 'auto-url-complete' },
        { id: 'btnSavePreset', feature: 'advanced-presets' }
      ];
      
      protectedButtons.forEach(({ id, feature }) => {
        const btn = document.getElementById(id);
        if (btn) {
          const hasAccess = window.checkFeatureAccess(feature);
          console.log(`üîò ${id}: ${hasAccess ? 'Disponible' : 'Protegido por Premium'}`);
        }
      });
      
    }, 2000); // Esperar 2 segundos para que todo se inicialice
    
    // Test de eventos
    window.addEventListener('accessControlReady', (e) => {
      console.log('üéâ Evento accessControlReady disparado:', e.detail);
    });
    
    window.addEventListener('subscriptionChanged', () => {
      console.log('üì° Evento subscriptionChanged detectado');
    });
  });
  
  // Funci√≥n helper para testear manualmente
  window.testAccessControl = {
    // Simular cambio de suscripci√≥n para testing
    simulateSubscriptionChange: (hasSubscription = true) => {
      // Mock del estado de suscripci√≥n
      const originalCheck = window.checkFeatureAccess;
      window.checkFeatureAccess = (featureId) => {
        // Si la caracter√≠stica no es premium, siempre permitir
        if (!window.accessControl?.premiumFeatures?.has(featureId)) {
          return true;
        }
        return hasSubscription;
      };
      
      // Disparar evento de cambio
      window.dispatchEvent(new Event('subscriptionChanged'));
      
      console.log(`üé≠ Simulando usuario ${hasSubscription ? 'CON' : 'SIN'} suscripci√≥n`);
    },
    
    // Restaurar funci√≥n original
    restore: () => {
      if (window.accessControl) {
        window.checkFeatureAccess = (featureId) => {
          return window.accessControl.hasFeatureAccess(featureId);
        };
      }
      console.log('üîÑ Estado original restaurado');
    },
    
    // Mostrar estado actual
    showStatus: () => {
      const isInitialized = window.accessControl?.isInitialized;
      const hasSubscription = window.accessControl?.hasActiveSubscription();
      
      console.log('üìä Estado actual del Access Control:');
      console.log(`  - Inicializado: ${isInitialized ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Suscripci√≥n activa: ${hasSubscription ? '‚úÖ' : '‚ùå'}`);
      
      if (window.accessControl?.subscriptionStatus) {
        console.log(`  - Plan: ${window.accessControl.subscriptionStatus.planType}`);
      }
    }
  };
  
  console.log('üß™ Test utilities disponibles en window.testAccessControl');
  console.log('   - simulateSubscriptionChange(true/false)');
  console.log('   - restore()');
  console.log('   - showStatus()');
})();